<?php

/**
 * @file
 * Contains filter_form_values.module.
 */

use Drupal\Core\Field\FieldConfigInterface;
use Drupal\Core\Form\FormState;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Routing\RouteMatchInterface;

/**
 * Implements hook_help().
 */
function filter_form_values_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {
    // Main module help for the filter_form_values module.
    case 'help.page.filter_form_values':
      $output = '';
      $output .= '<h3>' . t('About') . '</h3>';
      $output .= '<p>' . t('Developer module to add in filtering of form state values before submit handlers.') . '</p>';
      return $output;

    default:
  }
}

/**
 * Implements hook_form_alter().
 */
function filter_form_values_form_alter(&$form, FormStateInterface $form_state, $form_id) {
  if (isset($form['#entity_builders'])) {
    array_unshift($form['actions']['submit']['#submit'], 'filter_form_values_presubmit');
  }
  $entity_draft_module = \Drupal::service('module_handler')->moduleExists('entity_draft');
  if ($entity_draft_module && isset($form['actions']['draft']['#submit'])) {
    array_unshift($form['actions']['draft']['#submit'], 'filter_form_values_presubmit');
  }
}

/**
 * Filter the form values before they go to submitForm / save.
 */
function filter_form_values_presubmit(&$form, FormStateInterface $form_state) {
  // Get a list of modules that should apply.
  $module_handler = \Drupal::moduleHandler();

  $filter_functions = $module_handler->invokeAll('filter_form_values_filter_functions', [$form, $form_state]);

  if (count($filter_functions) > 0) {
    $form_state_values = $form_state->getValues();

    $form_display = $form_state->getStorage()['form_display'];
    $bundle = $form_display->getTargetBundle();
    $entity_type_id = $form_display->getTargetEntityTypeId();
    $entity = $form_state->getFormObject()->getEntity();

    if ($entity->isNew()) {
      return;
    }

    $entity_field_manager = \Drupal::service('entity_field.manager');
    $field_definitions = $entity_field_manager->getFieldDefinitions($entity_type_id, $bundle);

    $field_definitions = array_filter($field_definitions, function ($field_definition) {
      return $field_definition instanceof FieldConfigInterface;
    });

    uasort($field_definitions, ['\Drupal\Core\Config\Entity\ConfigEntityBase', 'sort']);

    $dirty_fields = [];
    foreach ($field_definitions as $field_name => $field_definition) {
      if (is_array($form_state_values) && array_key_exists($field_name, $form_state_values)) {
        $clean_value = FALSE;
        foreach ($filter_functions as $function_name) {
          $function_filtered = call_user_func_array($function_name, [
            $form, $form_display, $form_state_values, $entity, $field_name, $field_definition,
          ]);

          $clean_value = $clean_value || $function_filtered;
        }

        if ($clean_value) {
          $dirty_fields[] = $field_name;
        }
      }
    }

    if (count($dirty_fields) > 0) {
      // Recreate the form_state values from the original entity.
      // Caveat being that not array wrapped.
      $entity_type_manager = \Drupal::entityTypeManager();
      $original_entity = $entity_type_manager->getStorage($entity_type_id)->load($entity->id());
      $original_form_object = $entity_type_manager->getFormObject($original_entity->getEntityTypeId(), $form_display->getMode());
      $original_form_object->setEntity($original_entity);
      $original_form_state = new FormState();
      $original_form = \Drupal::formBuilder()->buildForm($original_form_object, $original_form_state);
      $original_form_state_values = $original_form_state->getValues();

      foreach ($dirty_fields as $field_name) {
        // @todo better to use the widget type to detect workflow field.
        if ($field_name != 'field_state') {
          // Set file field from the original value.
          if ($field_definitions[$field_name]->getType() == 'file') {
            $form_state->setValue($field_name, $original_form_state_values[$field_name]);
          }
          else {
            $form_state->unsetValue($field_name);
          }
        }
      }
    }
  }
}
